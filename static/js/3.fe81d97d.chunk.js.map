{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/AddPostsForm/AddPostsForm.js","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","src","photos","small","alt","fullName","userId","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","LookingForAJob","lookingForAJobDescription","Preloader","Post","className","s","item","message","maxLength5","maxLength","PostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","type","validate","MyPosts","React","memo","postsElements","posts","map","p","key","id","MyPostsArea","values","addPost","newPostText","Posts","compose","connect","state","profilePage","dispatch","addProfilePostActionCreator","Profile","MyPostsContainer","ProfileContainer","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","Component","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.fe81d97d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MyPostsArea\":\"MyPosts_MyPostsArea__9UL0d\",\"Posts\":\"MyPosts_Posts__1nyy0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__XLSBE\"};","import React, {useEffect, useState} from 'react';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activatedEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivatedEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div>\r\n                <span onClick={activatedEditMode}>{props.status || '---'}</span>\r\n            </div>\r\n            }\r\n            { editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} value={status} autoFocus={true} onBlur={deactivatedEditMode} />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div>\r\n            <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            <>\r\n                <div><img src={props.profile.photos.small} alt={' '}/></div>\r\n                <div>FullName: {props.profile.fullName}</div>\r\n                <div>UserId: {props.profile.userId}</div>\r\n                <div>AboutMe: {props.profile.aboutMe}</div>\r\n                <div>Facebook: {props.profile.contacts.facebook}</div>\r\n                <div>Website: {props.profile.contacts.website}</div>\r\n                <div>vk: {props.profile.contacts.vk}</div>\r\n                <div>Twitter: {props.profile.contacts.twitter}</div>\r\n                <div>Instagram: {props.profile.contacts.instagram}</div>\r\n                <div>Youtube: {props.profile.contacts.youtube}</div>\r\n                <div>Github: {props.profile.contacts.github}</div>\r\n                <div>MainLink: {props.profile.contacts.mainLink}</div>\r\n                <div>LookingForAJob: {props.profile.LookingForAJob}</div>\r\n                <div>LookingForAJobDescription: {props.profile.lookingForAJobDescription}</div>\r\n            </>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://klike.net/uploads/posts/2018-06/1530090978_1.jpg' />\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import {maxLength} from \"../../../../utilities/Validators/Validators\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../../Common/FormsRedactor/FormsRedactor\";\r\nimport React from \"react\";\r\n\r\nconst maxLength5 = maxLength(5)\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostText'} component={Textarea} type=\"text\" validate={[maxLength5]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const PostFormRedux = reduxForm({\r\n    form: 'ProfileAddNewPostFrom'})(AddNewPostForm)","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {PostFormRedux} from \"./AddPostsForm/AddPostsForm\";\r\n\r\n\r\nconst MyPosts = React.memo(props => {\r\n    let postsElements = props.posts.map(p =>\r\n        <Post message={p.message} key={p.id}/>);\r\n\r\n    let addNewPost = (values) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.MyPostsArea}>\r\n            <h3>My posts</h3>\r\n            <PostFormRedux onSubmit={addNewPost}/>\r\n            <div className={s.Posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addProfilePostActionCreator} from \"../../../redux/Profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addProfilePostActionCreator(newPostText))\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps))(MyPosts)\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/Profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\"\r\nimport {withAuthRedirect} from \"../HOC/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter\r\n    ) (ProfileContainer);"],"sourceRoot":""}